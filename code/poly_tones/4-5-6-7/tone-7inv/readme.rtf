{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww19480\viewh17480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs20 \cf0 These four tones are created with testPolyGenWav.py using 4 key cycles, \
each one from one of the 4 inversions:  4-5-6-7, 5-6-7-8, 6-7-8-10, and 7-8-10-12.\
\
Each tone is a mix of the harmonic seventh chord which transforms through its\
inversions during the course of the tone.\
\
The cycle length is 1/50 sec, so is based on fundamental 50 Hz, but each of the\
tones is then 50*k where k=4,5,6,7, so the lowest fundamental in the resulting mixed\
tone is 200 Hz.  \
\
Backing up, here is the full story:\
\
I have been experimenting with "polyphonic tones" using "polyphonic cycles".  The\
first basic case is the harmonic seventh, which is a chord based on just frequency\
ratios 5/4, 6/5, 7/6. Those ratios are close to equal tempered intervals of Major 3rd,\
minor 3rd, and minor 3rd, but are not equal.  Their cent values are about 386, 315, and\
267, as opposed to equal temperament: 400, 300, 300.  The harmonic seventh is known to\
produce fewer beat patterns between harmonic partials, giving a more "pure" sound,\
which is purportedly sung by barber shop quartets when singing a dominant seventh\
chord for an extended time, say at the end of a song.  \
\
Greg Dixon asked me if cycle modeling could be applied to polyphonic sounds. So I\
started by creating short samples of harmonic seventh chords generated by spline cycles.\
In order to create one tone of say 2 seconds, we start with a spline representing one\
cycle, with say 30 bspline coefficients.  This generates a waveform on the interval [0,1]\
which can then be scaled to any length interval.  We use this to write a waveform with\
fundamental frequency 4*50=200 into a cycle of length 1/50 sec.  So there are 4 cycles.  \
(ie. 4*(1/200)=1/50) We do the same with frequencies 5*50=250, 6*50=300, and 7*50=350.\
We write cycles into the interval of length 1/50, then we mix all four of these to get\
on "polyphonic cycle" of length 1/50.  Such a polyphonic cycle can then be repeated to\
form a tone, such as poly_mix-4-5-6-7.wav.  This tone is homogeneous (the cycle shape\
is not changing), and not so interesting.  It sounds like a car horn.  It was mixed\
at the sample level by simply summing the four and dividing by four.  The fun starts\
when we use this cycle to morph between other cycles in waveforms.\
\
In order to use the polyphonic cycle with cycle interpolation, we need to represent it\
with one set of bspline coefficients.  At 44100 samples per second, the tone has \
882 = 44100/50 samples per cycle.  Such a cycle can be represented by a bspline with\
some fraction of the samples used as interpolation points.  We tried using n=60 bspline\
coefficients, but the sound produced was not a great match, especially as we applied this\
process to sequences other than 4-5-6-7, with larger values.  So we went with n=90. This\
is just under 10% of the number of samples.  Once the bspline coefficients are computed\
then we can substitute the waveform mix with the waveform generated by the bsplines, which\
we call poly_bcoeffs-4-5-6-7.wav.  \
\
As a first attempt at morphing between different polyphonic cycles in one waveform, we\
have produced in these four examples different length tones generated fromt the 4 inversion\
types of the harmonic seventh chord.  The cycles also have gains, to give an envelope to\
the tone:  0.8,1.0,0.6,0.3.  \
}